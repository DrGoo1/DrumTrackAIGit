openapi: 3.0.0
info:
  title: DrumTracKAI API
  description: API for drum performance analysis and style transfer
  version: 1.0.0
  contact:
    name: DrumTracKAI Support
    url: https://drumtrackai.com/support
servers:
  - url: https://api.drumtrackai.com/v1
    description: Production server
  - url: https://api-staging.drumtrackai.com/v1
    description: Staging server
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        subscription_tier:
          type: string
          enum: [free, individual, professional]
        credits_remaining:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    AnalysisResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        analysis_type:
          type: string
          enum: [audio, youtube, midi]
        created_at:
          type: string
          format: date-time
        performance_score:
          type: number
          format: float
          minimum: 0
          maximum: 100
        tempo:
          type: number
          format: float
        rhythm_complexity:
          type: integer
          minimum: 1
          maximum: 10
        instruments:
          type: object
          properties:
            kick:
              type: object
              properties:
                consistency:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                power:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                technique:
                  type: string
            snare:
              type: object
              properties:
                consistency:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                ghost_notes:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                rimshots:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                technique:
                  type: string
            hihat:
              type: object
              properties:
                consistency:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                open_closed_ratio:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                technique:
                  type: string
            toms:
              type: object
              properties:
                consistency:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                usage:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                technique:
                  type: string
        suggested_improvements:
          type: array
          items:
            type: string

    YouTubeSearchResult:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        thumbnail:
          type: string
          format: uri
        channel:
          type: string
        duration:
          type: integer
          description: Duration in seconds

    SubscriptionTier:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          enum: [free, individual, professional]
        price:
          type: number
          format: float
        description:
          type: string
        features:
          type: array
          items:
            type: string
        credits_per_month:
          type: integer
          minimum: 0

    DrummerStyle:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        characteristics:
          type: object
          properties:
            groove:
              type: number
              format: float
              minimum: 0
              maximum: 1
            complexity:
              type: number
              format: float
              minimum: 0
              maximum: 1
            dynamics:
              type: number
              format: float
              minimum: 0
              maximum: 1
        example_performances:
          type: array
          items:
            type: string
            format: uri

    JobStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, processing, completed, failed]
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 100
        result_url:
          type: string
          format: uri
        error:
          $ref: '#/components/schemas/Error'

paths:
  /analyze/audio:
    post:
      summary: Analyze an audio file
      description: Upload and analyze a drum performance audio file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Audio file (WAV, MP3, FLAC, OGG)
                analysis_type:
                  type: string
                  enum: [performance, training, reference]
                  default: performance
                  description: Purpose of the analysis
      responses:
        '202':
          description: Analysis job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required (insufficient credits)
        '415':
          description: Unsupported Media Type

  /analyze/youtube:
    post:
      summary: Analyze a YouTube video
      description: Analyze drum performance from a YouTube video
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: YouTube video URL
                start_time:
                  type: integer
                  description: Start time in seconds
                  default: 0
                duration:
                  type: integer
                  description: Duration to analyze in seconds (max 300)
                  default: 180
                analysis_type:
                  type: string
                  enum: [performance, training, reference]
                  default: performance
                  description: Purpose of the analysis
              required:
                - url
      responses:
        '202':
          description: Analysis job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required (insufficient credits)

  /analyze/midi:
    post:
      summary: Analyze a MIDI file
      description: Upload and analyze a drum performance MIDI file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: MIDI file
                analysis_type:
                  type: string
                  enum: [performance, training, reference]
                  default: performance
                  description: Purpose of the analysis
      responses:
        '202':
          description: Analysis job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required (insufficient credits)
        '415':
          description: Unsupported Media Type

  /analyze/results/{job_id}:
    get:
      summary: Get analysis results
      description: Retrieve results for a completed analysis job
      security:
        - BearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Job not found

  /analyze/history:
    get:
      summary: Get analysis history
      description: Retrieve user's analysis history
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Analysis history
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnalysisResult'
        '401':
          description: Unauthorized

  /youtube/search:
    post:
      summary: Search YouTube videos
      description: Search for drum performance videos on YouTube
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: Search query
                max_results:
                  type: integer
                  default: 20
                  minimum: 1
                  maximum: 50
              required:
                - query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/YouTubeSearchResult'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized

  /user/register:
    post:
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 8
                username:
                  type: string
                  minLength: 3
              required:
                - email
                - password
                - username
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                  username:
                    type: string
                  token:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email or username already exists

  /user/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                  username:
                    type: string
                  token:
                    type: string
                  subscription_tier:
                    type: string
                  credits_remaining:
                    type: integer
        '401':
          description: Invalid credentials

  /user/profile:
    get:
      summary: Get user profile
      description: Retrieve current user's profile information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    put:
      summary: Update user profile
      description: Update current user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '409':
          description: Username already exists

  /user/password:
    put:
      summary: Change password
      description: Update current user's password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
                  minLength: 8
              required:
                - current_password
                - new_password
      responses:
        '200':
          description: Password updated
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid current password

  /user/reset-password:
    post:
      summary: Request password reset
      description: Send password reset email to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/reset-password/{token}:
    post:
      summary: Reset password with token
      description: Reset user password using reset token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  format: password
                  minLength: 8
              required:
                - new_password
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or expired token

  /subscription/plans:
    get:
      summary: Get subscription plans
      description: Retrieve available subscription plans
      responses:
        '200':
          description: Subscription plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionTier'

  /subscription/upgrade:
    post:
      summary: Upgrade subscription
      description: Upgrade user to a paid subscription plan
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_id:
                  type: string
                payment_method_id:
                  type: string
                coupon_code:
                  type: string
              required:
                - plan_id
                - payment_method_id
      responses:
        '200':
          description: Subscription upgraded
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription_id:
                    type: string
                  plan:
                    $ref: '#/components/schemas/SubscriptionTier'
                  start_date:
                    type: string
                    format: date
                  end_date:
                    type: string
                    format: date
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '402':
          description: Payment failed

  /subscription/cancel:
    post:
      summary: Cancel subscription
      description: Cancel user's paid subscription
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Subscription cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  end_date:
                    type: string
                    format: date
        '401':
          description: Unauthorized
        '404':
          description: No active subscription found

  /style/drummers:
    get:
      summary: Get drummer styles
      description: Retrieve available drummer styles for style transfer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Drummer styles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DrummerStyle'
        '401':
          description: Unauthorized

  /style/drummer/{id}:
    get:
      summary: Get drummer style details
      description: Retrieve detailed information about a specific drummer style
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Drummer style details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrummerStyle'
        '401':
          description: Unauthorized
        '404':
          description: Drummer style not found

  /style/transfer:
    post:
      summary: Apply style transfer
      description: Apply a drummer's style to a MIDI file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: MIDI file to apply style to
                drummer_id:
                  type: string
                  description: ID of drummer style to apply
                intensity:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
                  default: 0.5
                  description: Intensity of style transfer
              required:
                - file
                - drummer_id
      responses:
        '202':
          description: Style transfer job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required (insufficient credits)
        '404':
          description: Drummer style not found